{"version":3,"sources":["routes/password_policies_mgr/index.tsx"],"names":["Password","props","_this","Object","_Users_edz_Desktop_exhibit_center_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_18__","this","_Users_edz_Desktop_exhibit_center_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_20__","_Users_edz_Desktop_exhibit_center_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_21__","call","isShowByResourcesLabel","label","resourcesLabel","indexOf","save","_this$props","putPasswordPolicies","locale","body","state","cb","res","status","data","code","antd_es_message__WEBPACK_IMPORTED_MODULE_17__","success","error","minLength","lifetime","format","failCount","type","resetCredential","_this2","getPasswordPolicies","params","password_policies","setState","id","_this3","_this$props2","classes","_this$state","react__WEBPACK_IMPORTED_MODULE_23___default","a","createElement","_selectArr","value","push","className","root","react_intl__WEBPACK_IMPORTED_MODULE_26__","defaultMessage","antd_es_row__WEBPACK_IMPORTED_MODULE_11__","row","antd_es_col__WEBPACK_IMPORTED_MODULE_15__","span","offset","antd_es_input_number__WEBPACK_IMPORTED_MODULE_13__","min","max","defaultValue","parser","replace","onChange","txt","desc","antd_es_checkbox__WEBPACK_IMPORTED_MODULE_9__","Group","checkbox","lowercase","capital","digit","symbol","antd_es_radio__WEBPACK_IMPORTED_MODULE_7__","e","target","radio","antd_es_input__WEBPACK_IMPORTED_MODULE_5__","style","width","marginLeft","maxLength","antd_es_divider__WEBPACK_IMPORTED_MODULE_3__","dashed","antd_es_button__WEBPACK_IMPORTED_MODULE_1__","disabled","onClick","React","Component","withStyles","theme","margin","backgroundColor","padding","& .warn","display","paddingLeft","color","textAlign","height","lineHeight","& .ant-col","marginBottom","connect","_ref","_ref$password_policie","app","intl","_ref2","_ref2$password_polici","resetPasswordPoliciess"],"mappings":"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","file":"static/js/passwordPoliciesMgr.5d1af61e.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { withStyles } from \"@material-ui/styles\";\nimport { connect } from \"react-redux\";\nimport { FormattedMessage } from \"react-intl\";\nimport {\n  Col,\n  Row,\n  Divider,\n  Button,\n  InputNumber,\n  Radio,\n  Input,\n  Checkbox,\n  message\n} from \"antd\";\n\nexport interface PasswordProps {\n  classes: any;\n  match: any;\n  getPasswordPolicies: Function;\n  putPasswordPolicies: Function;\n  resetPasswordPoliciess: Function;\n  password_policies: any;\n  resourcesLabel: any;\n  locale: any;\n}\n\nconst styles: any = (theme: any) => ({\n  root: {\n    margin: \"20px\",\n    backgroundColor: \"#FFFFFF\",\n    padding: \"30px 20px\",\n    '& .warn': {\n      display: 'inline-block',\n      paddingLeft: '10px',\n      color: 'red'\n    }\n  },\n  row: {\n    padding: \"15px 30px 0\"\n  },\n  label: {\n    textAlign: \"end\"\n  },\n  desc: {\n    color: \"#999BA2\"\n  },\n  radio: {\n    display: \"block !important\",\n    height: \"30px\",\n    lineHeight: \"30px\"\n  },\n  checkbox: {\n    width: \"100%\",\n    \"& .ant-col\": {\n      marginBottom: \"12px\"\n    }\n  }\n});\n\nclass Password extends React.Component<PasswordProps, any> {\n  constructor(props: Readonly<PasswordProps>) {\n    super(props);\n    this.state = {\n      minLength: null,\n      lifetime: null,\n      format: [],\n      failCount: null,\n      type: null,\n      resetCredential: null\n    };\n  }\n\n  componentDidMount() {\n    const { getPasswordPolicies } = this.props;\n    getPasswordPolicies({\n      params: {},\n      cb: () => {\n        const { password_policies } = this.props;\n        password_policies &&\n          this.setState({\n            minLength: password_policies.minLength,\n            lifetime: password_policies.lifetime,\n            format: password_policies.format,\n            failCount: password_policies.failCount,\n            type: password_policies.type,\n            resetCredential: password_policies.resetCredential,\n            id: password_policies.id\n          });\n      }\n    });\n  }\n\n  isShowByResourcesLabel = (label: string) => {\n    const { resourcesLabel } = this.props;\n    return resourcesLabel && resourcesLabel.indexOf(label) > -1;\n  };\n\n  save = () => {\n    const { putPasswordPolicies, locale } = this.props;\n\n    putPasswordPolicies({\n      body: this.state,\n      cb: (res: any) => {\n        if (res.status === 200 && res.data.code === \"200\") {\n          message.success(locale === \"zh\" ? \"修改成功\" : \"Modify successfully\");\n        } else {\n          message.error(locale === \"zh\" ? \"修改失败\" : \"Modify failed\");\n        }\n      }\n    });\n  };\n\n  render() {\n    const { classes, password_policies, resourcesLabel } = this.props;\n    const { minLength, lifetime, failCount, type, resetCredential } = this.state;\n    if (!password_policies || !resourcesLabel || !minLength) return <div></div>;\n    const _selectArr: any = [];\n    for (let value in password_policies.format) {\n      if (password_policies.format[value]) {\n        _selectArr.push(value);\n      }\n    }\n    return (\n      <div className={classes.root}>\n        <span>\n          <FormattedMessage\n            id=\"password.passwordRules\"\n            defaultMessage=\"Password rules\"\n          />\n        </span>\n        <Row className={classes.row}>\n          <Col span={5} className={classes.label}>\n            <FormattedMessage\n              id=\"password.minimumPasswordLength\"\n              defaultMessage=\"Minimum password length\"\n            />\n          </Col>\n          <Col span={17} offset={1}>\n            <InputNumber\n              min={1}\n              max={32}\n              defaultValue={password_policies.minLength}\n              parser={(value: any) => value.replace(/[^\\d]/g, \"\")}\n              onChange={value => {\n                this.setState({ minLength: value })\n              }}\n            />\n            <FormattedMessage\n              id=\"password.aCharacter\"\n              defaultMessage=\"Characters\"\n            />\n            {\n              !minLength && <FormattedMessage\n                id=\"password.length.null\"\n                defaultMessage=\"Minimum password length can't be empty\"\n              >\n                {(txt) => (\n                  <span className=\"warn\">{txt}</span>\n                )}\n              </FormattedMessage>\n            }\n             \n            <p className={classes.desc}>\n              <FormattedMessage\n                id=\"password.text.limitPasswordLength\"\n                defaultMessage=\"Password length should be between 8 and 32.\"\n              />\n            </p>\n          </Col>\n        </Row>\n\n        <Row className={classes.row}>\n          <Col span={5} className={classes.label}>\n            <FormattedMessage\n              id=\"password.thePasswordContainsAtLeastOne\"\n              defaultMessage=\"Password should contain at least\"\n            />\n          </Col>\n          <Col span={17} offset={1}>\n            <Checkbox.Group\n              className={classes.checkbox}\n              onChange={(value: Array<any>) => {\n                this.setState({\n                  format: {\n                    lowercase: value.indexOf(\"lowercase\") > -1,\n                    capital: value.indexOf(\"capital\") > -1,\n                    digit: value.indexOf(\"digit\") > -1,\n                    symbol: value.indexOf(\"symbol\") > -1\n                  }\n                });\n              }}\n              defaultValue={_selectArr}\n            >\n              <Row>\n                <Col span={24}>\n                  <Checkbox value=\"lowercase\">\n                    <FormattedMessage\n                      id=\"password.lowercase\"\n                      defaultMessage=\"Lowercase letters\"\n                    />\n                  </Checkbox>\n                </Col>\n              </Row>\n              <Row>\n                <Col span={24}>\n                  <Checkbox value=\"capital\">\n                    <FormattedMessage\n                      id=\"passworld.capital\"\n                      defaultMessage=\"Uppercase letters\"\n                    />\n                  </Checkbox>\n                </Col>\n              </Row>\n              <Row>\n                <Col span={24}>\n                  <Checkbox value=\"digit\">\n                    <FormattedMessage\n                      id=\"passworld.number\"\n                      defaultMessage=\"Digital number\"\n                    />\n                  </Checkbox>\n                </Col>\n              </Row>\n              <Row>\n                <Col span={24}>\n                  <Checkbox value=\"symbol\">\n                    <FormattedMessage\n                      id=\"password.specialCharacterSpaceDivision\"\n                      defaultMessage=\"Special characters (no space)\"\n                    />\n                  </Checkbox>\n                </Col>\n              </Row>\n            </Checkbox.Group>\n          </Col>\n        </Row>\n\n        <Row className={classes.row}>\n          <Col span={5} className={classes.label}>\n            <FormattedMessage\n              id=\"password.passwordValidity\"\n              defaultMessage=\"Password validity\"\n            />\n          </Col>\n          <Col span={17} offset={1}>\n            <InputNumber\n              min={0}\n              max={12}\n              parser={(value: any) => value.replace(/[^\\d]/g, \"\")}\n              defaultValue={password_policies.lifetime}\n              onChange={value => this.setState({ lifetime: value })}\n            />\n            <FormattedMessage id=\"password.month\" defaultMessage=\"Months\" />\n            {\n              (!lifetime && lifetime!== 0) && <FormattedMessage\n              id=\"password.validity.null\"\n              defaultMessage=\"Password validity can't be empty\"\n            >\n              {(txt) => (\n                <span className=\"warn\">{txt}</span>\n              )}\n            </FormattedMessage>\n            }\n            <p className={classes.desc}>\n              <FormattedMessage\n                id=\"password.text.limitPasswordExpiration\"\n                defaultMessage=\"\n                Set password expiration date, 0 means valid forever, max 12 months. Before expiration, send 5 times notification to user: 1 month before, 1 week before, last 3 days.\"\n              />\n            </p>\n          </Col>\n        </Row>\n\n        <Row className={classes.row}>\n          <Col span={5} className={classes.label}>\n            <FormattedMessage\n              id=\"password.maxRetries\"\n              defaultMessage=\"Max retry count\"\n            />\n          </Col>\n          <Col span={17} offset={1}>\n            <InputNumber\n              min={0}\n              defaultValue={password_policies.failCount}\n              parser={(value: any) => value.replace(/[^\\d]/g, \"\")}\n              onChange={value => this.setState({ failCount: value })}\n            />{\" \"}\n            <FormattedMessage id=\"password.times\" defaultMessage=\"Times\" />\n            {\n              (!failCount && failCount!== 0) && <FormattedMessage\n                id=\"password.repeat.null\"\n                defaultMessage=\"Max retry count can't be empty\"\n              >\n                {(txt) => (\n                  <span className=\"warn\">{txt}</span>\n                )}\n              </FormattedMessage>\n            }\n           \n            <p className={classes.desc}>\n              <FormattedMessage\n                id=\"password.text.limitTheNumberOfPasswordRetryErrors\"\n                defaultMessage=\"Max password retry cound, default 10, account will be locked after retry cound, 0 means no limit.\"\n              />\n            </p>\n          </Col>\n        </Row>\n\n        <Row className={classes.row}>\n          <Col span={5} className={classes.label}>\n            <FormattedMessage\n              id=\"password.resetPasswordPolicy\"\n              defaultMessage=\"Reset password policy\"\n            />\n          </Col>\n          <Col span={17} offset={1}>\n            <Radio.Group\n              onChange={(e: any) => {\n                this.setState({\n                  type: e.target.value\n                });\n              }}\n              defaultValue={password_policies.type}\n            >\n              <Radio className={classes.radio} value={\"AUTO_GENERATE\"}>\n                <FormattedMessage\n                  id=\"password.randomPassword\"\n                  defaultMessage=\"Random password\"\n                />\n              </Radio>\n              <Radio className={classes.radio} value={\"MANUAL_GENERATE\"}>\n                <FormattedMessage\n                  id=\"password.fixedPassword\"\n                  defaultMessage=\"Fixed password\"\n                />\n                {type === \"MANUAL_GENERATE\" && (\n                  <Input\n                    style={{ width: 100, marginLeft: 10 }}\n                    maxLength={32}\n                    onChange={(e: any) =>\n                      this.setState({\n                        resetCredential: e.target.value\n                      })\n                    }\n                    defaultValue={resetCredential}\n                  />\n                )}\n                {\n                  type === \"MANUAL_GENERATE\" && !resetCredential && <FormattedMessage\n                    id=\"password.reset.null\"\n                    defaultMessage=\"Fixed password can't be empty\"\n                  >\n                    {(txt) => (\n                      <span className=\"warn\">{txt}</span>\n                    )}\n                  </FormattedMessage>\n                }\n              </Radio>\n            </Radio.Group>\n\n            <p className={classes.desc}>\n              <FormattedMessage\n                id=\"password.text.limitPasswordLength\"\n                defaultMessage=\"Password length should be between 8 and 32.\"\n              />\n            </p>\n          </Col>\n        </Row>\n\n        {this.isShowByResourcesLabel(\"credential_update\") && (\n          <div>\n            <Divider dashed />\n            <Button type=\"primary\" \n              disabled={!minLength||(!lifetime && lifetime!== 0)||(!failCount && failCount!==0)|| (type===\"MANUAL_GENERATE\"&& !resetCredential)}\n              onClick={this.save}>\n              <FormattedMessage\n                id=\"action.applicationModify\"\n                defaultMessage=\"Application modify\"\n              />\n            </Button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\nconst mapState2Props = ({\n  password_policies: { \n    password_policies, \n    putPasswordPolicies \n  },\n  app: { resourcesLabel },\n  intl: { locale }\n}: any) => ({\n  password_policies,\n  putPasswordPolicies,\n  resourcesLabel,\n  locale\n});\n\nconst mapDispatch2Props = ({\n  password_policies: {\n    getPasswordPolicies,\n    putPasswordPolicies,\n    resetPasswordPoliciess\n  }\n}: any) => ({\n  getPasswordPolicies,\n  putPasswordPolicies,\n  resetPasswordPoliciess\n});\n\nexport default withStyles(styles)(\n  connect(mapState2Props, mapDispatch2Props)(Password)\n);\n\n"],"sourceRoot":""}