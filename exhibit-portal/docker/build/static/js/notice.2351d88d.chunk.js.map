{"version":3,"sources":["routes/notice/result_item.tsx","messages/notice.ts","routes/notice/index.tsx"],"names":["confirm","warringTypes","ResultItem","delete","id","event","stopPropagation","_this$props","_this","props","getUnreadNoticeList","putDeleteById","getData","intl","formatMessage","title","concat","common_msg","confirm_delete_notice","okText","btn_sure","cancelText","btn_cancel","onOk","cb","language","locale","onCancel","toDetail","preventDefault","history","push","pathname","state","_this$props2","this","data","appCodeList","appCode","find","item","code","react","onClick","bind","className","styles","notice_item","status","notice_item_title_readed","notice_item_title","badge","color","level","audioIcon","image","images","video","videos","notice_item_desc","item_warn","message","item_source","origin","name","english","item_create_at","occurTime","React","connect","_ref","search","_ref2","notice","common","notice_msg","defineMessages","defaultMessage","msg_list","notice_null","Notice","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getNoticeList","pageNumber","query","store","get","pageSize","err","res","onChange","setState","resetNoticeRead","clearList","deleteNotice","count","confirm_reset_notice","warn","resetQuerys","resetNoticeLists","nextProps","list","noticeEntities","length","_this2","_this$props3","layout","header_bar","show","noticeContent","nav","result","content","readed_delete","icon","type","font","readed","classNames","clear","map","index","result_item","key","page","pagination","total","showTotal","current","footer","bg","_ref$notice","_ref2$notice","injectIntl"],"mappings":"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","file":"static/js/notice.2351d88d.chunk.js","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport AudioIcon from \"../../components/audioIcon\";\nimport styles from './style.module.less';\nimport { Badge, Modal } from 'antd';\nimport { common_msg } from '../../messages/common';\nexport interface IResultItemProps {\n  data;\n  history;\n  intl;\n  getData;\n  putDeleteById;\n  getUnreadNoticeList;\n  appCodeList;\n}\n\nconst { confirm } = Modal;\nconst warringTypes = ['#02B583', '#08ABF8', '#FFC000', '#FC5B5B'];\n// level:0 绿色 1 蓝色 2: 黄色 3: 红色\nclass ResultItem extends React.PureComponent<IResultItemProps> {\n  delete = (id, event) => {\n    event.stopPropagation();\n    const { getUnreadNoticeList, putDeleteById, getData, intl } = this.props;\n    const { formatMessage } = intl;\n    confirm({\n      title: `${formatMessage(common_msg.confirm_delete_notice)}?`,\n      okText: formatMessage(common_msg.btn_sure),\n      cancelText: formatMessage(common_msg.btn_cancel),\n      onOk() {\n        putDeleteById({\n          id,\n          cb: () => {\n            getData()\n            getUnreadNoticeList({\n              language: intl.locale === \"zh\" ? \"chinese\" : \"english\",\n              cb: null\n            })\n          }\n        })\n      },\n      onCancel() { }\n    })\n  }\n  toDetail = (id, event) => {\n    event.preventDefault()\n    this.props.history.push({ pathname: 'notice/detail', state: { id: id } })\n  }\n  public render() {\n    let { data, appCodeList, intl } = this.props;\n    const { formatMessage } = intl;\n    const appCode = appCodeList.find((item) => item.code === data.appCode) || {};\n    return (\n      <div onClick={this.toDetail.bind(this, data.id)}\n        className={styles.notice_item}\n      >\n        <div className={data.status === 'haveRead' ? styles.notice_item_title_readed : styles.notice_item_title}>\n          <Badge color={warringTypes[data.level]} /> {data.title || ''}\n          <AudioIcon image={data.images} video={data.videos} />\n        </div>\n        <div className={styles.notice_item_desc}>\n          <div className={data.status === 'haveRead' ? '' : styles.item_warn}>\n            {data.message || ''}\n          </div>\n          <div className={styles.item_source}>\n            {formatMessage(common_msg.origin)}: {\n              intl.locale === 'zh' ? appCode.name : appCode.english\n            }\n          </div>\n          <div className={styles.item_create_at}>\n            {data.occurTime}\n          </div>\n          <div className={styles.delete} onClick={this.delete.bind(this, data.id)}>\n            {formatMessage(common_msg.delete)}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapState2Props = ({\n  search: {\n    appCodeList,\n  }\n}) => ({\n  appCodeList\n})\nconst mapDispatch2Props = ({\n  notice: {\n    putDeleteById\n  },\n  common: {\n    getUnreadNoticeList\n  }\n}: any) => ({\n  putDeleteById,\n  getUnreadNoticeList\n})\n\nexport default connect(\n  mapState2Props,\n  mapDispatch2Props\n)(ResultItem)\n","import { defineMessages } from 'react-intl';\nexport const notice_msg = defineMessages({\n\tmessage: {\n\t\tid: 'message',\n\t\tdefaultMessage: 'Message'\n\t},\n\tmsg_list: {\n\t\tid: 'msg_list',\n\t\tdefaultMessage: 'Message List'\n\t},\n\tnotice_null: {\n\t\tid: 'notice_null',\n\t\tdefaultMessage: 'No news to clear',\n\t}\n});\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Layout, Pagination, Modal, Icon, message } from 'antd';\nimport ResultItem from './result_item';\nimport Nav from '../../components/nav';\nimport HeaderBar from '../../components/header_bar';\nimport Footer from '../../components/footer';\nimport styles from './style.module.less';\nimport store from 'store';\nimport classNames from 'classnames';\nimport { injectIntl } from 'react-intl';\nimport { notice_msg } from '../../messages/notice';\nimport { common_msg } from '../../messages/common';\nconst { confirm } = Modal;\nexport interface NoticeProps {\n  history;\n  location;\n  match;\n  list;\n  intl;\n  resetQuerys;\n  getNoticeList;\n  deleteNotice;\n  notice;\n  query;\n  resetNoticeRead;\n  resetNoticeLists;\n}\n\nclass Notice extends React.Component<NoticeProps, any> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pageNumber: 1\n    }\n  }\n  componentDidMount() {\n    const { query, resetQuerys } = this.props;\n    this.onChange(query.pageNumber || this.state.pageNumber);\n    resetQuerys();\n  }\n  componentWillUnmount() {\n    const { resetNoticeLists, } = this.props;\n    resetNoticeLists();\n  }\n  getData = () => {\n    let { getNoticeList } = this.props;\n    let { pageNumber } = this.state;\n    let lan = store.get('local_language');\n    getNoticeList({\n      query: {\n        language: lan === 'zh' ? 'chinese' : 'english',\n        pageNumber,\n        pageSize: 5\n      },\n      cb: (err, res) => { \n\n      }\n    });\n  };\n  // 分页\n  onChange = (pageNumber) => {\n    this.setState({\n      pageNumber\n    }, () => {\n      this.getData();\n    });\n  }\n  resetNoticeRead = () => {\n    const { resetNoticeRead } = this.props;\n    resetNoticeRead({\n      cb: () => {\n        this.getData()\n      }\n    })\n  }\n  componentWillReceiveProps(nextProps) {\n    if(nextProps) {\n      const list = nextProps.notice.noticeEntities || [];\n      const count = nextProps.notice.count;\n      if(!list.length && count) {\n        this.onChange(this.state.pageNumber-1)\n      }\n    }\n  }\n  clearList = () => {\n    const { deleteNotice, notice, intl } = this.props;\n    const { formatMessage } = intl;\n    if(notice.count) {\n      confirm({\n        title: `${formatMessage(common_msg.confirm_reset_notice)}?`,\n        okText: formatMessage(common_msg.btn_sure),\n        cancelText: formatMessage(common_msg.btn_cancel),\n        onOk() {\n          deleteNotice({ \n            cb: null\n          }) \n        },\n        onCancel() { }\n      })\n    }else {\n      message.warn(formatMessage(notice_msg.notice_null))\n    }\n    \n  };\n  public render() {\n    let { notice, history, intl, } = this.props;\n    const { formatMessage } = intl;\n    return (\n      <Layout className=\"layout\">\n        <HeaderBar history={history} intl={intl} show={true} /> \n        <div className={styles.noticeContent}>\n          <Nav name={notice_msg.message} title={notice_msg.msg_list} intl={intl}></Nav>\n          <div className={styles.result}>\n            <div className={styles.content}>\n              <div className={styles.readed_delete}>\n                <span onClick={this.resetNoticeRead}>\n                  <Icon type=\"check\" className={styles.font} />\n                  {formatMessage(common_msg.readed)}\n                </span>\n                <span onClick={this.clearList.bind(this)}>\n                  <span className={classNames('iconfont icon-lajitong', styles.font)} />\n                  {formatMessage(common_msg.clear)}\n                </span>\n              </div>\n              {(notice.noticeEntities || []).map((item, index) => {\n                return <ResultItem\n                  data={item}\n                  key={index}\n                  getData={this.getData}\n                  history={history}\n                  intl={intl}\n                />;\n              })}\n            </div>\n          </div>\n          {\n            notice.count ? (\n              <div className={styles.page}>\n                <Pagination\n                  total={notice && notice.count}\n                  showTotal={\n                    total =>  `${formatMessage(common_msg.total)} ${total} ${formatMessage(common_msg.count)}` \n                  }\n                  onChange={this.onChange}\n                  current={this.state.pageNumber}\n                  pageSize={5}\n                />\n              </div>\n            ) : null\n          }\n        </div>\n        <Footer intl={intl} bg='#213571'/>\n      </Layout>\n    );\n  }\n}\n\nconst mapState2Props = ({ \n  notice: { \n    notice,\n    query\n  } \n}) => ({\n  notice,\n  query\n})\nconst mapDispatch2Props = ({ \n  common: { \n    resetNoticeRead \n  },\n  notice: { \n    getNoticeList, \n    deleteNotice, \n    resetNoticeLists,\n    \n  },\n  search: {\n    resetQuerys,\n  }\n}:any) => ({\n  getNoticeList, \n  deleteNotice, \n  resetNoticeRead, \n  resetNoticeLists,\n  resetQuerys\n})\nexport default connect(\n  mapState2Props,\n  mapDispatch2Props\n)(injectIntl(Notice))"],"sourceRoot":""}